generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employees {
  id                   String            @id @default(uuid())
  employeeId           String?           @map("employee_id") @db.VarChar
  createdAt            DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime?         @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt            DateTime?         @map("deleted_at") @db.Timestamptz(6)
  version              Int?              @default(1)
  firstName            String            @map("first_name") @db.VarChar
  lastName             String            @map("last_name") @db.VarChar
  dateOfEmployement    DateTime?         @map("date_of_employement") @db.Timestamptz(6)
  dateOfBirth          DateTime          @map("date_of_birth") @db.Timestamp(6)
  dateOfJoining        DateTime          @map("date_of_joining") @db.Timestamp(6)
  phoneNumber          String            @map("phone_number") @db.VarChar
  alternatePhoneNumber String            @map("alternate_phone_number") @db.VarChar
  personalEmail        String            @unique @map("personal_email") @db.VarChar
  companyEmail         String?           @unique @map("company_email") @db.VarChar
  gender               String            @db.VarChar
  city                 String            @db.VarChar
  state                String            @db.VarChar
  street               String            @db.VarChar
  pincode              String            @db.VarChar
  profileImageUrl      String            @map("profile_image_url") @db.VarChar
  aadhar               String            @db.VarChar
  otherIdProof         String            @map("other_id_proof") @db.VarChar
  isActive             Boolean?          @default(true)
  password             String?
  employeeAsset        EmployeeAsset[]
  employeeRole         EmployeeRole[]
  EmployeeInvoce       EmployeeInvoice[]

  @@map("employees")
}

model Role {
  id           String         @id @default(uuid())
  name         String         @unique @db.VarChar
  createdAt    DateTime?      @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt    DateTime?      @map("deleted_at") @db.Timestamptz(6)
  updatedAt    DateTime?      @updatedAt @map("updated_at") @db.Timestamptz(6)
  employeeRole EmployeeRole[]

  @@map("role")
}

model EmployeeRole {
  id          String    @id @default(uuid())
  employee_id String
  role_id     String
  employeeId  Employees @relation(fields: [employee_id], references: [id])
  roleId      Role      @relation(fields: [role_id], references: [id])

  @@map("employee_role")
}

model Asset {
  id            String          @id @default(uuid())
  createdAt     DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime?       @updatedAt @map("updated_at") @db.Timestamptz(6)
  name          String          @db.VarChar
  modalNumber   Int             @map("modal_number")
  purchaseDate  DateTime?       @map("purchase_date") @db.Timestamptz(6)
  description   String          @db.VarChar
  billNumber    Int?
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamptz(6)
  warranty      Int             @default(0)
  employeeAsset EmployeeAsset[]

  @@map("assets")
}

model EmployeeAsset {
  id          String    @id @default(uuid())
  employee_id String
  asset_id    String
  assetsId    Asset     @relation(fields: [asset_id], references: [id])
  employeeId  Employees @relation(fields: [employee_id], references: [id])
}

model Clients {
  id           String    @id @default(uuid())
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  name         String    @db.VarChar
  alias        String    @db.VarChar
  invoiceColor String    @map("invoice_color")
  phone        String    @db.VarChar
  email        String    @unique @db.VarChar
  address      String    @db.VarChar

  @@map("clients")
}

model EmployeeInvoice {
  id                String    @id @default(uuid())
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt         DateTime? @map("deleted_at") @db.Timestamptz(6)
  employee_id       String
  employeeId        Employees @relation(fields: [employee_id], references: [id])
  name              String    @db.VarChar
  email             String    @db.VarChar
  designation       String    @db.VarChar
  location          String    @db.VarChar
  modeOfPayment     String    @map("mode_of_payment") @db.VarChar
  basicSalary       Float     @default(0) @map("basic_salary")
  overTime          Int       @default(0) @map("over_time")
  paidLeave         Int       @default(0) @map("paid_leave")
  insentive         Float     @default(0)
  securityAmount    Float     @default(0) @map("security_amount")
  professionalTax   Float     @default(0) @map("professional_tax")
  absent            Int       @default(0)
  advanceWithdrawal Float     @default(0) @map("advance_withdrawal")
  totalDeduction    Float     @default(0) @map("total_deduction")
  description       String    @db.VarChar
  paymentTerms      Int       @default(0) @map("payment_term")
  totalAmountPaid   Float     @default(0) @map("total_amount_paid")
  paymentDeu        DateTime  @db.Timestamptz(6)

  @@map("employees_invoce")
}

model Leave {
  id             String    @id @default(uuid())
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(6)
  employeeId     String    @map("employee_id")
  startDateTime  DateTime  @map("start_date_time")
  endDateTime    DateTime  @map("end_date_time")
  reasonForLeave String    @map("reason_for_leave")
  note           String
  status         String

  @@map("leaves")
}
